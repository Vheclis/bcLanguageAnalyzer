/* Generated By:JavaCC: Do not edit this line. ParserBC.java */
public class ParserBC implements ParserBCConstants {

  public  static void main(String args[])
  {


      try
      {
        ParserBC parser = new ParserBC (System.in);
        parser.bc();
        System.out.println("SUCESSO");
      }
      catch (Throwable e)
      {
        System.out.println(e.getMessage());
      }
  }

/*Análise léxica*/
  static final public void bc() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO_VIRGULA:
      case SEPARADOR:
      case ABRE_PARENTESES:
      case ASPAS_DUPLAS:
      case NEGACAO:
      case SUBTRACAO:
      case INCREMENTO:
      case DECREMENTO:
      case PONTO:
      case IF:
      case WHILE:
      case FOR:
      case BREAK:
      case CONTINUE:
      case QUIT:
      case PRINT:
      case RAIZ_QUADRADA:
      case TAMANHO:
      case ESCALA:
      case IBASE:
      case OBASE:
      case LAST:
      case RETORNO:
      case ID:
      case INTEIRO:
      case REAL:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
        comando_composto();
        break;
      case DEFINICAO:
        definicao_de_funcao();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO_VIRGULA:
      case SEPARADOR:
      case DEFINICAO:
      case ABRE_PARENTESES:
      case ASPAS_DUPLAS:
      case NEGACAO:
      case SUBTRACAO:
      case INCREMENTO:
      case DECREMENTO:
      case PONTO:
      case IF:
      case WHILE:
      case FOR:
      case BREAK:
      case CONTINUE:
      case QUIT:
      case PRINT:
      case RAIZ_QUADRADA:
      case TAMANHO:
      case ESCALA:
      case IBASE:
      case OBASE:
      case LAST:
      case RETORNO:
      case ID:
      case INTEIRO:
      case REAL:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_PARENTESES:
    case NEGACAO:
    case SUBTRACAO:
    case INCREMENTO:
    case DECREMENTO:
    case PONTO:
    case RAIZ_QUADRADA:
    case TAMANHO:
    case ESCALA:
    case IBASE:
    case OBASE:
    case LAST:
    case ID:
    case INTEIRO:
    case REAL:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      e();
      break;
    case IF:
      cIf();
      break;
    case WHILE:
      cWhile();
      break;
    case FOR:
      cFor();
      break;
    case PONTO_VIRGULA:
    case SEPARADOR:
      cNull();
      break;
    case BREAK:
      cBreak();
      break;
    case CONTINUE:
      cContinue();
      break;
    case QUIT:
      cQuit();
      break;
    case PRINT:
      cPrint();
      break;
    case ASPAS_DUPLAS:
      cString();
      break;
    case RETORNO:
      cReturn();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comando_composto() throws ParseException {
    lista_comandos();
  }

  static final public void lista_comandos() throws ParseException {
    comando();
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO_VIRGULA:
      case SEPARADOR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARADOR:
          jj_consume_token(SEPARADOR);
          break;
        case PONTO_VIRGULA:
          jj_consume_token(PONTO_VIRGULA);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      comando();
    }
  }

  static final public void cIf() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABRE_PARENTESES);
    e();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(ABRE_CHAVES);
    comando_composto();
    jj_consume_token(FECHA_CHAVES);
    if (jj_2_2(2)) {
      jj_consume_token(ELSE);
      jj_consume_token(ABRE_CHAVES);
      comando_composto();
      jj_consume_token(FECHA_CHAVES);
    } else {
      ;
    }
  }

  static final public void cWhile() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(ABRE_PARENTESES);
    e();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(ABRE_CHAVES);
    comando_composto();
    jj_consume_token(FECHA_CHAVES);
  }

  static final public void cFor() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_PARENTESES:
    case NEGACAO:
    case SUBTRACAO:
    case INCREMENTO:
    case DECREMENTO:
    case PONTO:
    case RAIZ_QUADRADA:
    case TAMANHO:
    case ESCALA:
    case IBASE:
    case OBASE:
    case LAST:
    case ID:
    case INTEIRO:
    case REAL:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      e();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(PONTO_VIRGULA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_PARENTESES:
    case NEGACAO:
    case SUBTRACAO:
    case INCREMENTO:
    case DECREMENTO:
    case PONTO:
    case RAIZ_QUADRADA:
    case TAMANHO:
    case ESCALA:
    case IBASE:
    case OBASE:
    case LAST:
    case ID:
    case INTEIRO:
    case REAL:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      e();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(PONTO_VIRGULA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_PARENTESES:
    case NEGACAO:
    case SUBTRACAO:
    case INCREMENTO:
    case DECREMENTO:
    case PONTO:
    case RAIZ_QUADRADA:
    case TAMANHO:
    case ESCALA:
    case IBASE:
    case OBASE:
    case LAST:
    case ID:
    case INTEIRO:
    case REAL:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      e();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(ABRE_CHAVES);
    comando_composto();
    jj_consume_token(FECHA_CHAVES);
  }

  static final public void cNull() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEPARADOR:
      jj_consume_token(SEPARADOR);
      break;
    case PONTO_VIRGULA:
      jj_consume_token(PONTO_VIRGULA);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void cBreak() throws ParseException {
    jj_consume_token(BREAK);
  }

  static final public void cContinue() throws ParseException {
    jj_consume_token(CONTINUE);
  }

  static final public void cQuit() throws ParseException {
    jj_consume_token(QUIT);
  }

  static final public void cPrint() throws ParseException {
    jj_consume_token(PRINT);
    lista_expressoes();
  }

  static final public void lista_expressoes() throws ParseException {
    e();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRGULA);
      e();
    }
  }

  static final public void cString() throws ParseException {
    jj_consume_token(ASPAS_DUPLAS);
    jj_consume_token(STRING);
    jj_consume_token(ENDSTRING);
  }

  static final public void cReturn() throws ParseException {
    jj_consume_token(RETORNO);
    if (jj_2_3(2)) {
      e();
    } else {
      ;
    }
  }

  static final public void e() throws ParseException {
    e1();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OU_LOGICO:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(OU_LOGICO);
      e1();
    }
  }

  static final public void e1() throws ParseException {
    e2();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case E_LOGICO:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(E_LOGICO);
      e2();
    }
  }

  static final public void e2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGACAO:
      jj_consume_token(NEGACAO);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    e3();
  }

  static final public void e3() throws ParseException {
    e4();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
    case MENOR_IGUAL:
    case MAIOR_IGUAL:
    case DIFERENTE:
    case MENOR:
    case MAIOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      case MENOR_IGUAL:
        jj_consume_token(MENOR_IGUAL);
        break;
      case MAIOR_IGUAL:
        jj_consume_token(MAIOR_IGUAL);
        break;
      case DIFERENTE:
        jj_consume_token(DIFERENTE);
        break;
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e4();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void e4() throws ParseException {
    if (jj_2_4(3)) {
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_COLCHETE:
        jj_consume_token(ABRE_COLCHETE);
        e();
        jj_consume_token(FECHA_COLCHETE);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUI:
        jj_consume_token(ATRIBUI);
        break;
      case ATRIBUI_SOMANDO:
        jj_consume_token(ATRIBUI_SOMANDO);
        break;
      case ATRIBUI_SUBTRAINDO:
        jj_consume_token(ATRIBUI_SUBTRAINDO);
        break;
      case ATRIBUI_MULTIPLICANDO:
        jj_consume_token(ATRIBUI_MULTIPLICANDO);
        break;
      case ATRIBUI_DIVINDO:
        jj_consume_token(ATRIBUI_DIVINDO);
        break;
      case ATRIBUI_RESTO:
        jj_consume_token(ATRIBUI_RESTO);
        break;
      case ATRIBUI_POTENCIA:
        jj_consume_token(ATRIBUI_POTENCIA);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e4();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESES:
      case SUBTRACAO:
      case INCREMENTO:
      case DECREMENTO:
      case PONTO:
      case RAIZ_QUADRADA:
      case TAMANHO:
      case ESCALA:
      case IBASE:
      case OBASE:
      case LAST:
      case ID:
      case INTEIRO:
      case REAL:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
        e5();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void e5() throws ParseException {
    e6();
    label_6:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        jj_consume_token(SOMA);
        break;
      case SUBTRACAO:
        jj_consume_token(SUBTRACAO);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e6();
    }
  }

  static final public void e6() throws ParseException {
    e7();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
      case DIVISAO:
      case RESTO:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
        jj_consume_token(MULTIPLICACAO);
        break;
      case DIVISAO:
        jj_consume_token(DIVISAO);
        break;
      case RESTO:
        jj_consume_token(RESTO);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e7();
    }
  }

  static final public void e7() throws ParseException {
    e8();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POTENCIA:
      jj_consume_token(POTENCIA);
      e7();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void e8() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBTRACAO:
      jj_consume_token(SUBTRACAO);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    e9();
  }

  static final public void e9() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENTO:
    case DECREMENTO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENTO:
        jj_consume_token(INCREMENTO);
        break;
      case DECREMENTO:
        jj_consume_token(DECREMENTO);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_COLCHETE:
        jj_consume_token(ABRE_COLCHETE);
        e();
        jj_consume_token(FECHA_COLCHETE);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_6(3)) {
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABRE_COLCHETE:
          jj_consume_token(ABRE_COLCHETE);
          e();
          jj_consume_token(FECHA_COLCHETE);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCREMENTO:
          jj_consume_token(INCREMENTO);
          break;
        case DECREMENTO:
          jj_consume_token(DECREMENTO);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABRE_PARENTESES:
        case PONTO:
        case RAIZ_QUADRADA:
        case TAMANHO:
        case ESCALA:
        case IBASE:
        case OBASE:
        case LAST:
        case ID:
        case INTEIRO:
        case REAL:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
          e10();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void e10() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEIRO:
      jj_consume_token(INTEIRO);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case ABRE_PARENTESES:
      jj_consume_token(ABRE_PARENTESES);
      e();
      jj_consume_token(FECHA_PARENTESES);
      break;
    case RAIZ_QUADRADA:
      jj_consume_token(RAIZ_QUADRADA);
      jj_consume_token(ABRE_PARENTESES);
      e();
      jj_consume_token(FECHA_PARENTESES);
      break;
    case TAMANHO:
      jj_consume_token(TAMANHO);
      jj_consume_token(ABRE_PARENTESES);
      e();
      jj_consume_token(FECHA_PARENTESES);
      break;
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_7(2)) {
        jj_consume_token(ESCALA);
        jj_consume_token(ABRE_PARENTESES);
        e();
        jj_consume_token(FECHA_PARENTESES);
      } else if (jj_2_8(2)) {
        chamada_funcao();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABRE_COLCHETE:
            jj_consume_token(ABRE_COLCHETE);
            e();
            jj_consume_token(FECHA_COLCHETE);
            break;
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          break;
        case IBASE:
          jj_consume_token(IBASE);
          break;
        case OBASE:
          jj_consume_token(OBASE);
          break;
        case ESCALA:
          jj_consume_token(ESCALA);
          break;
        case LAST:
          jj_consume_token(LAST);
          break;
        case PONTO:
          jj_consume_token(PONTO);
          break;
        case 69:
          jj_consume_token(69);
          jj_consume_token(ABRE_PARENTESES);
          e();
          jj_consume_token(FECHA_PARENTESES);
          break;
        case 70:
          jj_consume_token(70);
          jj_consume_token(ABRE_PARENTESES);
          e();
          jj_consume_token(FECHA_PARENTESES);
          break;
        case 71:
          jj_consume_token(71);
          jj_consume_token(ABRE_PARENTESES);
          e();
          jj_consume_token(FECHA_PARENTESES);
          break;
        case 72:
          jj_consume_token(72);
          jj_consume_token(ABRE_PARENTESES);
          e();
          jj_consume_token(FECHA_PARENTESES);
          break;
        case 73:
          jj_consume_token(73);
          jj_consume_token(ABRE_PARENTESES);
          e();
          jj_consume_token(FECHA_PARENTESES);
          break;
        case 74:
          jj_consume_token(74);
          jj_consume_token(ABRE_PARENTESES);
          e();
          jj_consume_token(VIRGULA);
          e();
          jj_consume_token(FECHA_PARENTESES);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void chamada_funcao() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_PARENTESES:
    case NEGACAO:
    case SUBTRACAO:
    case INCREMENTO:
    case DECREMENTO:
    case PONTO:
    case RAIZ_QUADRADA:
    case TAMANHO:
    case ESCALA:
    case IBASE:
    case OBASE:
    case LAST:
    case ID:
    case INTEIRO:
    case REAL:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      lista_expressoes();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
  }

  static final public void definicao_de_funcao() throws ParseException {
    jj_consume_token(DEFINICAO);
    jj_consume_token(ID);
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      lista_var();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(ABRE_CHAVES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO:
      jj_consume_token(AUTO);
      lista_var();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    lista_comandos();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETORNO:
      cReturn();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_CHAVES);
  }

  static final public void lista_var() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_COLCHETE:
      jj_consume_token(ABRE_COLCHETE);
      jj_consume_token(FECHA_COLCHETE);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_8;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_COLCHETE:
        jj_consume_token(ABRE_COLCHETE);
        jj_consume_token(FECHA_COLCHETE);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(ESCALA)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(TAMANHO)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(RAIZ_QUADRADA)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(POTENCIA)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(ABRE_COLCHETE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(ABRE_CHAVES)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_13()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(E_LOGICO)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(OU_LOGICO)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(RETORNO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(ASPAS_DUPLAS)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(73)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(72)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(71)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(70)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(ABRE_COLCHETE)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(69)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(ABRE_COLCHETE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserBCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x921c00,0x921c00,0x920c00,0xc00,0xc00,0x820000,0x820000,0x820000,0xc00,0x0,0x200000,0x400000,0x800000,0x1f080000,0x1f080000,0x2000,0xe0000000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x20000,0x2000,0x20000,0x0,0x820000,0x0,0x0,0x0,0x2000,0x0,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfff69c20,0xfff69c20,0xfff69c20,0x0,0x0,0xbf001c20,0xbf001c20,0xbf001c20,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xbf001c20,0x30,0x1c0,0x1c0,0x200,0x20,0xc00,0x0,0x0,0xc00,0xc00,0xbf001000,0x0,0x3000000,0xbc001000,0xbf001c20,0x80000000,0x4000,0x40000000,0x0,0x2000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x7e6,0x7e6,0x7e6,0x0,0x0,0x7e6,0x7e6,0x7e6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e6,0x0,0x6,0x7e0,0x7e6,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserBC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserBC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserBCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserBC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserBCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserBC(ParserBCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserBCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
